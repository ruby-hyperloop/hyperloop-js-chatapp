/* Generated by Opal 0.10.3 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$include', '$target', '$is_a?', '$new', '$native?', '$to_s', '$to_n', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$alias_native', '$split', '$state']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Socket(){};
      var self = $Socket = $klass($base, $super, 'Socket', $Socket);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9;

      def["native"] = nil;
      Opal.defs(self, '$supported?', TMP_1 = function() {
        var self = this;

        return $scope.get('Browser')['$supports?']("WebSocket");
      }, TMP_1.$$arity = 0);

      self.$include($scope.get('Native'));

      self.$include((($scope.get('IO')).$$scope.get('Writable')));

      self.$include((($scope.get('Event')).$$scope.get('Target')));

      ($a = ($b = self).$target, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this, $c;
if (value == null) value = nil;
      if ((($c = $scope.get('Native')['$is_a?'](value, window.WebSocket)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return $scope.get('Socket').$new(value)
          } else {
          return nil
        }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);

      Opal.defn(self, '$initialize', TMP_3 = function $$initialize(url, protocol) {
        var $a, $b, $c, $d, $e, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        if (protocol == null) {
          protocol = nil;
        }
        TMP_3.$$p = null;
        if ((($a = self['$native?'](url)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_3, false)), $a.$$p = null, $a).call($b, url)
        } else if (protocol !== false && protocol !== nil && protocol != null) {
          ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_3, false)), $a.$$p = null, $a).call($c, new window.WebSocket(url.$to_s(), protocol.$to_n()))
          } else {
          ($a = ($d = self, Opal.find_super_dispatcher(self, 'initialize', TMP_3, false)), $a.$$p = null, $a).call($d, new window.WebSocket(url.$to_s()))
        };
        if (block !== false && block !== nil && block != null) {
          if (block.$arity()['$=='](0)) {
            return ($a = ($e = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($e)
            } else {
            return block.$call(self)
          }
          } else {
          return nil
        };
      }, TMP_3.$$arity = -2);

      self.$alias_native("protocol");

      self.$alias_native("url");

      self.$alias_native("buffered", "bufferedAmount");

      Opal.defn(self, '$type', TMP_4 = function $$type() {
        var self = this;

        
      switch (self["native"].binaryType) {
        case "blob":
          return "blob";

        case "arraybuffer":
          return "buffer";

        default:
          return "string";
      }
    ;
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$state', TMP_5 = function $$state() {
        var self = this;

        
      switch (self["native"].readyState) {
        case window.WebSocket.CONNECTING:
          return "connecting";

        case window.WebSocket.OPEN:
          return "open";

        case window.WebSocket.CLOSING:
          return "closing";

        case window.WebSocket.CLOSED:
          return "closed";
      }
    ;
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$extensions', TMP_6 = function $$extensions() {
        var self = this;

        return (self["native"].extensions).$split(/\s*,\s*/);
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$alive?', TMP_7 = function() {
        var self = this;

        return self.$state()['$==']("open");
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$write', TMP_8 = function $$write(data) {
        var self = this;

        return self["native"].send(data.$to_n());
      }, TMP_8.$$arity = 1);

      Opal.alias(self, '<<', 'write');

      Opal.alias(self, 'send', 'write');

      return (Opal.defn(self, '$close', TMP_9 = function $$close(code, reason) {
        var self = this;

        if (code == null) {
          code = nil;
        }
        if (reason == null) {
          reason = nil;
        }
        return self["native"].close(code.$to_n(), reason.$to_n());
      }, TMP_9.$$arity = -1), nil) && 'close';
    })($scope.base, null)
  })($scope.base)
})(Opal);
